#!/bin/sh

export PATH="/usr/sbin:/usr/bin:/sbin:/bin"

# Set up symlinks and keymap
/bin/busybox --install -s
loadkmap < /usr/share/keymaps/default.bmap \
    || echo "  Error loading keymap."

echo "Mounting /proc."
mkdir -p /proc
mount -t proc -o noexec,nosuid,nodev proc /proc
echo 1 > /proc/sys/kernel/printk

echo "Mounting /dev"
if mount | grep -q "/dev type devtmpfs"; then
    echo "  /dev has been mounted by the kernel"
else
    mkdir -p /dev
    mount -t devtmpfs -o exec,nosuid,mode=0755,size=10M udev /dev
fi

echo "Mounting /dev/pts."
mkdir -m 0755 /dev/pts
mount -t devpts -o gid=5,mode=0620 devpts /dev/pts

echo "Mounting /sys."
mkdir -p /sys
mount -t sysfs sysfs /sys -o noexec,nosuid,nodev
echo 0 > /proc/sys/kernel/printk

#Import kernel command-line
# shellcheck disable=SC2046
set -- $(cat /proc/cmdline)

mode=default
filesystem=""
flags=""

for cmd in "$@"; do
    case "$cmd" in
        root=ZFS=*)
            mode=zfs
            filesystem="${cmd#root=ZFS=}"
            ;;
        root=9P=*)
            mode=9p
            filesystem="${cmd#root=9P=}"
            ;;
        root=virtio=*)
            mode=virtio
            filesystem="${cmd#root=virtio=}"
            ;;
        root=*)
            filesystem="${cmd#root=}"
            ;;
        rootflags=*)
            flags="${cmd#rootflags=}"
            ;;
    esac
done

mkdir -p /realroot

if [ "${mode}" = default ] && [ -z "${filesystem}" ]; then
    echo "No root filesystem given"
    ash
elif [ "${mode}" = 9p ]; then
    mount -t 9p -o trans=virtio,version=9p2000.L "${filesystem}" /realroot || {
        echo "  9p root failed to mount."
        ash
    }
elif [ "${mode}" = virtio ]; then
    mount -t virtiofs "${filesystem}" /realroot || {
        echo "  virtio root failed to mount."
        ash
    }
elif [ "${mode}" = zfs ]; then
    echo "Importing pool tank."
    # TODO: get tank name from kernel param
    pool=${filesystem%%/*}
    zpool import -N -c /etc/zfs/zpool.cache "${pool}" || {
        echo "  Zpool failed to mount with cache-file. Attempting to force."
        zpool import -N -f "${pool}" || {
            echo "  Error Importing pool failed."
            while ! zpool list "${pool}" > /dev/null; do
                echo "Please import pool ${pool} manually then exit."
                ash
            done
        }
    }

    encryption=$(zfs get -H -o value encryption "${filesystem}") || {
        echo "  Error, could not determine encryption status"
        ash
    }

    if [ "${encryption}" != "off" ]; then
        #TODO: Add support for other keylocations and keyformats
        encroot=$(zfs get -H -o value encryptionroot "${filesystem}") || {
            echo "  Error, could not determine encryption root"
            ash
        }

        echo "Decrypting Root \"${encroot}\""
        zfs load-key "${encroot}" || {
            echo "  Error, could not unlock encryption root"
            ash
        }
    fi

    echo "Mounting /realroot."
    mount -t zfs -o rw,zfsutil "${filesystem}" /realroot || {
        echo "  Error: Mounting filesystem failed."
        ash
    }
fi

if [ -f /realroot/maintenance ]; then
    echo "Entering maintenance shell."
    ash
fi

echo "Switching root filesystem."
exec switch_root /realroot /sbin/init
